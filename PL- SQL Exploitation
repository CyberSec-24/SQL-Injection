PL/SQL, similar to the stored procedure, is vulnerable to various SQL injection attacks. 

The PL/SQL code has the same vulnerabilities as dynamic queries that integrate user input at run time. 

Some of the techniques used by an attacker to perform an SQL injection attack on PL/SQL blocks


 Exploiting Quotes 
For example, 
if an attacker injects malicious input such as 'x' OR '1'='1' into the user password field, the modified query given in the procedure returns a row without providing a valid password.

EXEC Validate_UserPassword ('Bob', 'x'' OR ''1''=''1'); 

The PL/SQL procedure executes successfully and the resultant SQL query will be
SELECT 1 FROM User_Details WHERE UserName = 'Bob' AND Password = 'x' OR '1'='1';

â–ª Exploitation by Truncation
An attacker may use in-line comments to bypass certain parts of an SQL statement.

The attacker uses in-line comments along with username as follows.
EXEC Validate_UserPassword ('Bob''--', ''); The PL/SQL procedure executes successfully and the resultant SQL query will be
SELECT 1 FROM User_Details WHERE UserName = 'Bob'--AND Password='';

he techniques discussed above to exploit PL/SQL code can also be used with any insecure programming structures in PHP, .NET, and so on, which are used to interact with an SQL database





